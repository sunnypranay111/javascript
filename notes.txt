creating a file
-> open vscode (open cmd and select folder path) code . 
->ctrl+n new file name it properly check location properly
-> save file(ctrl+s)

open cmd prompt

()= parantasis
[]= angulr brackets
{}= cruly brackets
_ = hypon
` = tild symbol
''= single qoute
""=double quation
^= cap symbol
\ = forward slash
/ = backword slash
|= pipe symbol

Definations
JavaScript - JavaScript is a dynamic programming language that's used for web 
             development, in web applications, for game development, and lots more.
             It allows you to implement dynamic features on web pages that cannot be
             done with only HTML and CSS.

JavaScript(Uses) - JavaScript is commonly used for creating web pages. It allows us to add dynamic behavior to the webpage and add special effects to the webpage. On websites, it is mainly used for validation purposes.
                    JavaScript helps us to execute complex actions and also enables the interaction of websites with visitors.

1. "USE STRICT" - "use strict"; Defines that JavaScript code should be executed in "strict mode".
                The "use strict" directive was new in ECMAScript version 5.
                It is not a statement, but a literal expression, ignored by earlier versions of JavaScript.
                The purpose of "use strict" is to indicate that the code should be executed in "strict mode".
                With strict mode, you can not, for example, use undeclared variables.
                All modern browsers support "use strict" except Internet Explorer 9 and lower.

2. Variables - A JavaScript variable is simply a name of storage location. There are two types of variables in JavaScript : local variable and global variable.
            There are some rules while declaring a JavaScript variable (also known as identifiers).
            A. Name must start with a letter (a to z or A to Z), underscore( _ ), or dollar( $ ) sign.
            B. After first letter we can use digits (0 to 9), for example value1.
            C. JavaScript variables are case sensitive, for example x and X are different variables.

3. ADDITION - The addition ( + ) operator produces the sum of numeric operands or string concatenation.

4. SUBTRACTION - The subtraction ( - ) operator subtracts the two operands, producing their difference.

5. MULTIPICATION - The multiplication (*) operator produces the product of the operands.

6. DIVISION - The division (/) operator produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.

7. INTEGER - Numbers can be positive or negative integers. However, integers are floating-point values in JavaScript. 
            Integers value will be accurate up to 15 digits in JavaScript.
            Integers with 16 digits onwards will be changed and rounded up or down; therefore, use BigInt for integers larger than 15 digits.
            Example: var num=10 // Numeric integer value

8. Float Value OR Decimal Value: A floating-point represent a decimal integer with either decimal points or fraction expressed
                Example: var num1 = 5;              // Numeric integer value
                         var num2 = 10.5;            // Numeric float value
                         var num3 = -30.47;          // Negative numeric float value

9. Character - char( value ) Parameters: This function accepts single parameter value which is to be converted into its single-character string representation.
                Example: char alph='A'

10. String - Strings are used for storing text/characters. For example, "Hello World" is a string of characters.
             Unlike many other programming languages, C does not have a String type to easily create string variables.

11. Booleans - booleans are the primitive data types that can either be true or false . For example, const a = true; const b = false;
                 Note: If you wrap true or false in a quote, then they are considered as a string.             

12. Assignment(=) -  Assignment operators are used to assign values to JavaScript variables.

13. Equality (==) - The equality (==) operator checks whether its two operands are equal, returning a Boolean result. Unlike the strict equality operator, 
                    it attempts to convert and compare operands that are of different types.
                    Example:
                    var a=1234
                    var b=1234
                    var c="1234"
                    console.log(a==b);         //o/p> true
                    console.log(a==c);        //o/p> true
                    console.log(a===b);
                    console.log(a===c);

14. Strict equality (===) - The strict equality (===) operator checks whether its two operands are equal, returning a Boolean result. Unlike the equality operator,
                            the strict equality operator always considers operands of different types to be different.
                            Example:                  
                            var a=1234
                            var b=1234
                            var c="1234"
                            console.log(a===b);      //o/p> true
                            console.log(a===c);      //o/p> false

15. Implicit Conversion - In certain situations, JavaScript automatically converts one data type to another (to the right type).
                            This is known as implicit conversion.


16. Function - A function in JavaScript is similar to a procedureâ€”a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function,
		 it should take some input and return an output where there is some obvious relationship between the input and the output.

		JavaScript Function Syntax
		A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().

		Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).

		The parentheses may include parameter names separated by commas:
		(parameter1, parameter2, ...)

		The code to be executed, by the function, is placed inside curly brackets: {}

		function name(parameter1, parameter2, parameter3) {
 		 // code to be executed
		}
		Function parameters are listed inside the parentheses () in the function definition.

		Function arguments are the values received by the function when it is invoked.

		Inside the function, the arguments (the parameters) behave as local variables.

		Function Invocation
		
		The code inside the function will execute when "something" invokes (calls) the function:

		When an event occurs (when a user clicks a button)
		When it is invoked (called) from JavaScript code
		Automatically (self invoked)
		You will learn a lot more about function invocation later in this tutorial.

		Function Return
		When JavaScript reaches a return statement, the function will stop executing.

		If the function was invoked from a statement, JavaScript will "return" to execute the code after the invoking statement.

		Functions often compute a return value. The return value is "returned" back to the "caller":


16. Spread Oparatos and Rest operators- JavaScript uses three dots (...) for both the
    rest and spread operators. But these two operators are not the same.

    The main difference between rest and spread is that the rest operator puts the
    rest of some specific user-supplied values into a JavaScript array. But the
    spread syntax expands iterables into individual elements.

17. Deep Copy and Shollow Copy:- In Shallow copy, a copy of the original object is stored and only the
    reference address is finally copied. In Deep copy, the copy of the original object
    and the repetitive copies both are stored.
