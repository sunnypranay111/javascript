creating a file
-> open vscode (open cmd and select folder path) code . 
->ctrl+n new file name it properly check location properly
-> save file(ctrl+s)

open cmd prompt

()= parantasis
[]= angulr brackets
{}= cruly brackets
_ = hypon
` = tild symbol
''= single qoute
""=double quation
^= cap symbol
\ = forward slash
/ = backword slash
|= pipe symbol

Definations
JavaScript - JavaScript is a dynamic programming language that's used for web 
             development, in web applications, for game development, and lots more.
             It allows you to implement dynamic features on web pages that cannot be
             done with only HTML and CSS.

JavaScript(Uses) - JavaScript is commonly used for creating web pages. It allows us to add dynamic behavior to
                    the webpage and add special effects to the webpage. On websites, it is mainly used for 
                    validation purposes. JavaScript helps us to execute complex actions and also enables the
                    interaction of websites with visitors.

1. "USE STRICT" - "use strict"; Defines that JavaScript code should be executed in "strict mode".
                The "use strict" directive was new in ECMAScript version 5.
                It is not a statement, but a literal expression, ignored by earlier versions of JavaScript.
                The purpose of "use strict" is to indicate that the code should be executed in "strict mode".
                With strict mode, you can not, for example, use undeclared variables.
                All modern browsers support "use strict" except Internet Explorer 9 and lower.

2. Variables - A JavaScript variable is simply a name of storage location. There are two types of variables in 
                JavaScript : local variable and global variable.
            There are some rules while declaring a JavaScript variable (also known as identifiers).
            A. Name must start with a letter (a to z or A to Z), underscore( _ ), or dollar( $ ) sign.
            B. After first letter we can use digits (0 to 9), for example value1.
            C. JavaScript variables are case sensitive, for example x and X are different variables.

3. ADDITION - The addition ( + ) operator produces the sum of numeric operands or string concatenation.

4. SUBTRACTION - The subtraction ( - ) operator subtracts the two operands, producing their difference.

5. MULTIPICATION - The multiplication (*) operator produces the product of the operands.

6. DIVISION - The division (/) operator produces the quotient of its operands where the left operand is the
                 dividend and the right operand is the divisor.

7. INTEGER - Numbers can be positive or negative integers. However, integers are floating-point values in 
                JavaScript. Integers value will be accurate up to 15 digits in JavaScript. Integers with 
                16 digits onwards will be changed and rounded up or down; therefore, use BigInt for 
                integers larger than 15 digits. Example: var num=10 // Numeric integer value

8. Float Value OR Decimal Value: A floating-point represent a decimal integer with either decimal points or
                                fraction expressed
                Example: var num1 = 5;              // Numeric integer value
                         var num2 = 10.5;            // Numeric float value
                         var num3 = -30.47;          // Negative numeric float value

9. Character - char( value ) Parameters: This function accepts single parameter value which is to be converted
                                            into its single-character string representation.
                Example: char alph='A'

10. String - Strings are used for storing text/characters. For example, "Hello World" is a string of characters.
             Unlike many other programming languages, C does not have a String type to easily create string 
             variables.

11. Booleans - booleans are the primitive data types that can either be true or false . For example, 
                const a = true; const b = false;
                 Note: If you wrap true or false in a quote, then they are considered as a string.             

12. Assignment(=) -  Assignment operators are used to assign values to JavaScript variables.

13. Equality (==) - The equality (==) operator checks whether its two operands are equal, returning a Boolean
                result. Unlike the strict equality operator, it attempts to convert and compare operands that
                are of different types.
                    Example:
                    var a=1234
                    var b=1234
                    var c="1234"
                    console.log(a==b);         //o/p> true
                    console.log(a==c);        //o/p> true
                    console.log(a===b);
                    console.log(a===c);

14. Strict equality (===) - The strict equality (===) operator checks whether its two operands are equal,
                    returning a Boolean result. Unlike the equality operator, the strict equality operator
                    always considers operands of different types to be different.
                            Example:                  
                            var a=1234
                            var b=1234
                            var c="1234"
                            console.log(a===b);      //o/p> true
                            console.log(a===c);      //o/p> false

15. Implicit Conversion - In certain situations, JavaScript automatically converts one data type to another
                             (to the right type).
                            This is known as implicit conversion.


16. Function - A function in JavaScript is similar to a procedureâ€”a set of statements that performs a task or 
                calculates a value, but for a procedure to qualify as a function, it should take some input and 
                return an output where there is some obvious relationship between the input and the output.

		JavaScript Function Syntax
		A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().

		Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).

		The parentheses may include parameter names separated by commas:
		(parameter1, parameter2, ...)

		The code to be executed, by the function, is placed inside curly brackets: {}

		function name(parameter1, parameter2, parameter3) {
 		 // code to be executed
		}
		Function parameters are listed inside the parentheses () in the function definition.

		Function arguments are the values received by the function when it is invoked.

		Inside the function, the arguments (the parameters) behave as local variables.

		Function Invocation
		
		The code inside the function will execute when "something" invokes (calls) the function:

		When an event occurs (when a user clicks a button)
		When it is invoked (called) from JavaScript code
		Automatically (self invoked)
		You will learn a lot more about function invocation later in this tutorial.

		Function Return
		When JavaScript reaches a return statement, the function will stop executing.

If the function was invoked from a statement, JavaScript will "return" to execute the code after the invoking
statement.

Functions often compute a return value. The return value is "returned" back to the "caller":


16. Spread Oparatos and Rest operators- JavaScript uses three dots (...) for both the
    rest and spread operators. But these two operators are not the same.

    The main difference between rest and spread is that the rest operator puts the
    rest of some specific user-supplied values into a JavaScript array. But the
    spread syntax expands iterables into individual elements.

17. Deep Copy and Shollow Copy:- In Shallow copy, a copy of the original object is stored and only the
    reference address is finally copied. In Deep copy, the copy of the original object
    and the repetitive copies both are stored.

18. es6:- ECMAScript 2015 was the second major revision to JavaScript.

            ECMAScript 2015 is also known as ES6 and ECMAScript 6.

19. es == ecma Script:- ECMAScript, also known as JavaScript, is a programming language adopted by the
    European Computer Manufacturer's Association as a standard for performing computations in Web applications

20. es6 features:- New Features in ES6
                    The let keyword
                    The const keyword
                    Arrow Functions
                    The ... Operator
                    For/of
                    Map Objects
                    Set Objects
                    Classes
                    Promises
                    Symbol
                    Default Parameters
                    Function Rest Parameter
                    String.includes()
                    String.startsWith()
                    String.endsWith()
                    Array.from()
                    Array keys()
                    Array find()
                    Array findIndex()
                    New Math Methods
                    New Number Properties
                    New Number Methods
                    New Global Methods
                    Object entries
                    JavaScript Modules

21. difference between let, var and const:- var and let create variables that can be reassigned another value.
const creates "constant" variables that cannot be reassigned another value. let and const keywords are intradused in ES6.
developers shouldn't use var anymore. They should use let or const instead.
if you're not going to change the value of a variable, it is good practice to use const.

24. scope variable:- Scope of variables refers to the accessibility of a particular variable within the program. 

For example, assume you have two different functions. First, you declare a variable in function 1. Then, you move
 on to the following function, i.e., function 2. Is it possible if you try to access the variable made in function 1
  from function 2? This refers to the Scope of a Variable in JavaScript.
  JavaScript variables have different scopes, they are:

                        Global Scope
                        Block Scope
                        Function Scope

25. What is Global Scope?
        Any variable declared outside of a function is said to have Global Scope.
        In simple terms, a variable that can be accessed anywhere in the program is known as a variable with global
        scope. Globally scoped variables can be defined using any of the three keywords: let, const, and var. 
        
27. What is Block Scope?
        Before introducing ES6 (ECMAScript 6) in 2015, JavaScript had only two types of scopes: Global Scope and 
        Local Scope. 
        With the introduction of let and const keywords, it added a new type of Scope in JavaScript. You cannot
         access the variables declared inside a particular block (represented by {}) from outside the block. 
        The block scope does not work with the var keyword. You can either use let or const keywords for that.
28. What is Function Scope?
        With the creation of each new function, it creates a new scope in JavaScript. You cannot access variables
    defined inside a function from outside the function or from another function. Var, let, and const work similarly
          when used inside a function.        


29. hosting:-   In JavaScript, a variable can be declared after it has been used.

                In other words; a variable can be used before it has been declared.
                Example 1 gives the same result as Example 2:
                Example 1
                x = 5; // Assign 5 to x

                elem = document.getElementById("demo"); // Find an element
                elem.innerHTML = x;                     // Display x in the element

                var x; // Declare x

                Example 2
                var x; // Declare x
                x = 5; // Assign 5 to x

                elem = document.getElementById("demo"); // Find an element
                elem.innerHTML = x;                     // Display x in the element
                To understand this, you have to understand the term "hoisting".

Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope
(to the top of the current script or the current function).


30. Regular functions:- Regular functions created using function declarations or expressions are constructible and callable. Since
            regular functions are constructible, they can be called using the new keyword. However, the arrow functions are
            only callable and not constructible, i.e arrow functions can never be used as constructor functions.

31. function expression:- The Javascript Function Expression is used to define a function inside any expression. The
            Function Expression allows us to create an anonymous function that doesnâ€™t have any function name which
            is the main difference between Function Expression and Function Declaration. A function expression can
            be used as an IIFE (Immediately Invoked Function Expression)which runs as soon as it is defined. A 
            function expression has to be stored in a variable and can be accessed using variableName.


32. anonymous functions/name less functions:- It is a function that does not have any name associated with it.
                    Normally we use the function keyword before the function name to define a function in JavaScript,
                    however, in anonymous functions in JavaScript, we use only the function keyword without the 
                    function name.An anonymous function is not accessible after its initial creation, it can only
                     be accessed by a variable it is stored in as a function as a value. An anonymous function can
                      also have multiple arguments, but only one expression.


32. this:- In JavaScript, the this keyword refers to an object.

            Which object depends on how this is being invoked (used or called).

            The this keyword refers to different objects depending on how it is used:

            In an object method, this refers to the object.
            Alone, this refers to the global object.
            In a function, this refers to the global object.
            In a function, in strict mode, this is undefined.
            In an event, this refers to the element that received the event.
            Methods like call(), apply(), and bind() can refer this to any object.


33. arrow function:- Arrow functions were introduced in ES6.

                Arrow functions allow us to write shorter function syntax:

                let myFunction = (a, b) => a * b;

    Some of the benefits of using arrow functions in JavaScript are as follows: Arrow functions have shorter
    syntax than regular function expressions. Arrow functions have implicit return statements. Arrow functions
    increase readability.


34. iife:- An IIFE (Immediately Invoked Function Expression) is a function that runs the moment it is invoked
             or called in the JavaScript event loop. Having a function that behaves that way can be useful in
              certain situations. IIFEs prevent pollution of the global JS scope.
              
35. immediate invoked function

36. generator function




37. closurs


38. destructing:- Destructuring is a JavaScript expression that allows us to extract
                data from arrays, objects, and maps and set them into new, distinct 
                variables. Destructuring allows us to extract multiple properties, or
                items, from an arrayâ€‹ at a time.

39. arry destructing:- Destructuring the array in JavaScript simply means extracting
                multiple values from data stored in objects and arrays. The destructing
                assignment syntax is a JavaScript expression that makes it possible
                to unpack values from arrays, or properties from objects, into 
                distinct variables.

40. object destructing:- JavaScript Object Destructuring is an expression which allows
            us to access the data from objects like arrays, objects, maps and assign
            it to new variables. Through this object destructuring, we can create
            variables easily from the object's properties.

41. export:- Module exports are the instructions that tell Node. js which bits of code
        (functions, objects, strings, etc.) to export from a given file so that other files 
        are allowed to access the exported code.

42. import:- JavaScript modules allow you to break up your code into separate files.
            This makes it easier to maintain a code-base. Modules are imported
            from external files with the import statement. Modules also rely on type="module" in the <script> tag.


43. is javascript syncronus or asnccronous?
    JavaScript is an asynchronous and concurrent programming language that offers a lot of flexibility. It's 
    single-threaded like sync, but also non-blocking like async. Although it's synchronous by nature, JavaScript
     benefits from asynchronous code

44. callback functions:- A callback function is a function passed into another function as an argument, which
                         is then invoked inside the outer function to complete some kind of routine or action.

44. promise:- A Promise is a proxy for a value not necessarily known when the promise is created. It allows you
             to associate handlers with an asynchronous action's eventual success value or failure reason.

            
45. generator

46. async/await:- await is usually used to unwrap promises by passing a Promise as the expression . Using await
                 pauses the execution of its surrounding async function until the promise is settled (that is, 
                 fulfilled or rejected). When execution resumes, the value of the await expression becomes that
                  of the fulfilled promise.
47. async module


48. map:- Definition and Usage. map() creates a new array from calling a function for every array element. 
            map() does not execute the function for empty elements. map() does not change the original array.

49. filter:- Definition and Usage. The filter() method creates a new array filled with elements that pass a 
            test provided by a function. The filter() method does not execute the function for empty elements.
             The filter() method does not change the original array.

50. Array:- Arrays are used to store multiple values in a single variable. This is compared to a variable that
            can store only one value. Each item in an array has a number attached to it, called a 
            numeric index, that allows you to access it. In JavaScript, arrays start at index zero
            and can be manipulated with various methods.

51. Object:- an object is a standalone entity, with properties and type. Compare it with a cup, for example. 
            A cup is an object, with properties. A cup has a color, a design, weight, a material it 
            is made of, etc.
